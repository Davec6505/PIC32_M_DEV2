using System.Management.Automation;
using WeifenLuo.WinFormsUI.Docking;

namespace WinForms_Docable
{
    public partial class Form1 : Form
    {
        private DockPanel dockPanel;
        private VS2015LightTheme theme;
        private DeserializeDockContent _deserializeDockContent;

        public Form1()
        {
            InitializeComponent();
            InitializeDocking();

        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }



        private void InitializeDocking()
        {
            theme = new VS2015LightTheme();

            dockPanel = new DockPanel
            {
                Dock = DockStyle.Fill,
                // Theme property may not be available depending on DockPanelSuite package version
                // Theme = theme, // ✅ This works in v3.1.1
                DocumentStyle = DocumentStyle.DockingMdi
            };

            this.Controls.Add(dockPanel);

            new ToolWindow("Left Panel").Show(dockPanel, DockState.DockLeft);
            new ToolWindow("Right Panel").Show(dockPanel, DockState.DockRight);
            new ToolWindow("Main Document").Show(dockPanel, DockState.Document);
            new PowerShellPanel().Show(dockPanel, DockState.DockBottomAutoHide);
        }


        private IDockContent GetContentFromPersistString(string persistString)
        {
            return persistString switch
            {
                "Left Panel" => new ToolWindow("Left Panel"),
                "Right Panel" => new ToolWindow("Right Panel"),
                "Main Document" => new ToolWindow("Main Document"),
                _ => null
            };
        }

        private void LoadDefaultLayout()
        {
            new ToolWindow("Left Panel").Show(dockPanel, DockState.DockLeft);
            new ToolWindow("Right Panel").Show(dockPanel, DockState.DockRight);
            new ToolWindow("Main Document").Show(dockPanel, DockState.Document);
        }

        // Save layout on close
        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            dockPanel.SaveAsXml("layout.xml");
            base.OnFormClosing(e);
        }

        private ToolStrip toolStrip;

        private void InitializeToolbar()
        {
            toolStrip = new ToolStrip();
            toolStrip.Items.Add(new ToolStripButton("Run Script", null, RunScript_Click));
            toolStrip.Items.Add(new ToolStripButton("Reset Layout", null, ResetLayout_Click));
            this.Controls.Add(toolStrip);
            toolStrip.Dock = DockStyle.Top;
        }

        private void RunScript_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Script triggered!");
        }

        private void ResetLayout_Click(object sender, EventArgs e)
        {
            // Recreate the DockPanel to reset layout reliably across versions
            this.SuspendLayout();
            if (dockPanel != null)
            {
                this.Controls.Remove(dockPanel);
                dockPanel.Dispose();
                dockPanel = null;
            }
            InitializeDocking();
            this.ResumeLayout();
        }

    }


    public class ToolWindow : DockContent
    {
        public ToolWindow(string title)
        {
            this.Text = title;
            this.DockAreas = DockAreas.DockLeft | DockAreas.DockRight | DockAreas.Document;
            this.Controls.Add(new Label
            {
                Text = $"Content of {title}",
                Dock = DockStyle.Fill,
                TextAlign = System.Drawing.ContentAlignment.MiddleCenter
            });
        }
    }

    public class PowerShellPanel : DockContent
    {
        private RichTextBox console;

        public PowerShellPanel()
        {
            this.Text = "PowerShell Console";
            this.DockAreas = DockAreas.DockBottom;

            console = new RichTextBox { Dock = DockStyle.Fill };
            this.Controls.Add(console);

            RunPowerShell("Get-Process");
        }

        private void RunPowerShell(string command)
        {
            using var ps = PowerShell.Create();
            ps.AddScript(command);
            var results = ps.Invoke();
            foreach (var result in results)
                console.AppendText(result.ToString() + Environment.NewLine);
        }
    }

}
