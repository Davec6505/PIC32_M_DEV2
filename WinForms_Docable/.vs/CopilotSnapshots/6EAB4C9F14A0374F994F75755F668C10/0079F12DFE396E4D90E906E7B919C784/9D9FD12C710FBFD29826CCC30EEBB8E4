using System;
using System.Drawing;
using System.IO;
using System.Text;
using System.Windows.Forms;
using WeifenLuo.WinFormsUI.Docking;
using ScintillaNET;

namespace WinForms_Docable
{
    public class CodeEditorPanel : DockContent
    {
        public string FilePath { get; }
        private readonly Scintilla _editor;

        public CodeEditorPanel(string filePath)
        {
            FilePath = filePath;
            Text = Path.GetFileName(filePath);
            DockAreas = DockAreas.Document;

            _editor = new Scintilla
            {
                Dock = DockStyle.Fill,
                WrapMode = WrapMode.None,
                IndentationGuides = IndentView.LookBoth,
                CaretLineVisible = true,
                CaretLineBackColor = Color.FromArgb(245, 245, 255)
            };

            // Line numbers margin
            _editor.Margins[0].Type = MarginType.Number;
            _editor.Margins[0].Width = 40;

            // Folding margin (optional)
            _editor.Margins[2].Type = MarginType.Symbol;
            _editor.Margins[2].Mask = Marker.MaskFolders;
            _editor.Margins[2].Sensitive = true;
            _editor.Margins[2].Width = 16;
            _editor.SetProperty("fold", "1");
            ConfigureFoldMarkers();

            Controls.Add(_editor);

            // Base editor font theme
            ResetStyles(fontName: "Consolas", fontSize: 10);

            // Load file
            try
            {
                _editor.ReadOnly = false;
                _editor.Text = File.ReadAllText(filePath, Encoding.UTF8);
            }
            catch (Exception ex)
            {
                _editor.Text = $"Error loading file: {ex.Message}";
                _editor.ReadOnly = true;
            }

            // Configure syntax highlighting based on file extension
            ConfigureForFile(filePath);
        }

        private void ResetStyles(string fontName, int fontSize)
        {
            _editor.StyleResetDefault();
            _editor.Styles[Style.Default].Font = fontName;
            _editor.Styles[Style.Default].Size = fontSize;
            _editor.Styles[Style.Default].BackColor = Color.White;
            _editor.Styles[Style.Default].ForeColor = Color.Black;
            _editor.StyleClearAll();
        }

        private void ConfigureFoldMarkers()
        {
            SetFolderMarker(Marker.Folder, MarkerSymbol.BoxPlus);
            SetFolderMarker(Marker.FolderOpen, MarkerSymbol.BoxMinus);
            SetFolderMarker(Marker.FolderEnd, MarkerSymbol.BoxPlusConnected);
            SetFolderMarker(Marker.FolderMidTail, MarkerSymbol.TCorner);
            SetFolderMarker(Marker.FolderOpenMid, MarkerSymbol.BoxMinusConnected);
            SetFolderMarker(Marker.FolderSub, MarkerSymbol.VLine);
            SetFolderMarker(Marker.FolderTail, MarkerSymbol.LCorner);

            void SetFolderMarker(int marker, MarkerSymbol symbol)
            {
                _editor.Markers[marker].Symbol = symbol;
                _editor.Markers[marker].SetBackColor(Color.FromArgb(200, 200, 200));
                _editor.Markers[marker].SetForeColor(Color.FromArgb(80, 80, 80));
            }
        }

        private void ConfigureForFile(string filePath)
        {
            var ext = Path.GetExtension(filePath).ToLowerInvariant();

            // Default: plain text
            _editor.Lexer = Lexer.Null;

            // C/C headers
            if (ext is ".c" or ".h")
            {
                _editor.Lexer = Lexer.Cpp;

                // Colors
                var fore = Color.Black;
                var comment = Color.FromArgb(0, 128, 0);
                var number = Color.FromArgb(163, 21, 21);
                var str = Color.FromArgb(163, 21, 21);
                var keyword = Color.FromArgb(0, 0, 255);
                var keyword2 = Color.FromArgb(43, 145, 175);
                var preproc = Color.FromArgb(0, 0, 255);
                var oper = Color.FromArgb(128, 0, 128);

                _editor.Styles[Style.Cpp.Default].ForeColor = fore;
                _editor.Styles[Style.Cpp.Comment].ForeColor = comment;
                _editor.Styles[Style.Cpp.CommentLine].ForeColor = comment;
                _editor.Styles[Style.Cpp.CommentLineDoc].ForeColor = comment;
                _editor.Styles[Style.Cpp.Number].ForeColor = number;
                _editor.Styles[Style.Cpp.String].ForeColor = str;
                _editor.Styles[Style.Cpp.Character].ForeColor = str;
                _editor.Styles[Style.Cpp.Preprocessor].ForeColor = preproc;
                _editor.Styles[Style.Cpp.Operator].ForeColor = oper;
                _editor.Styles[Style.Cpp.Identifier].ForeColor = fore;
                _editor.Styles[Style.Cpp.Word].ForeColor = keyword;
                _editor.Styles[Style.Cpp.Word].Bold = true;
                _editor.Styles[Style.Cpp.Word2].ForeColor = keyword2;

                // Keywords
                var cKeywords =
                    "auto break case char const continue default do double else enum extern float for goto if " +
                    "inline int long register restrict return short signed sizeof static struct switch typedef " +
                    "union unsigned void volatile while _Alignas _Alignof _Atomic _Bool _Complex _Generic _Imaginary " +
                    "_Noreturn _Static_assert _Thread_local";

                var cTypes =
                    "bool size_t ptrdiff_t int8_t int16_t int32_t int64_t uint8_t uint16_t uint32_t uint64_t " +
                    "intptr_t uintptr_t wchar_t FILE va_list";

                _editor.SetKeywords(0, cKeywords);
                _editor.SetKeywords(1, cTypes);

                // Preprocessor and folding
                _editor.SetProperty("lexer.cpp.track.preprocessor", "1");
                _editor.SetProperty("lexer.cpp.update.preprocessor", "1");
                _editor.TabWidth = 4;
                _editor.UseTabs = false;
                _editor.IndentWidth = 4;
                _editor.SetProperty("fold.cpp.comment.explicit", "1");
                _editor.SetProperty("fold.compact", "1");
                _editor.SetProperty("fold.preprocessor", "1");
            }
        }
    }
}
