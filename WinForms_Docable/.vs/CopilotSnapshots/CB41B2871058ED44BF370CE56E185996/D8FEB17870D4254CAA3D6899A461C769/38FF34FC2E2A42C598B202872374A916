using WeifenLuo.WinFormsUI.Docking;
using WeifenLuo.WinFormsUI.Docking.VS2015;
using System;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.IO;
using System.Windows.Forms;

namespace WinForms_Docable
{
    public partial class Form1 : Form
    {
        private DockPanel dockPanel = null!;
        private DeserializeDockContent _deserializeDockContent;

        // Project explorer panel reference and state
        private ProjectTreePanel? _projectPanel;
        private string? _currentProjectPath;
        private string? _currentTreeSavePath;

        // PowerShell panel reference (to set working directory)
        private PowerShellPanel? _psPanel;

        // Open editors cache by full path
        private readonly Dictionary<string, CodeEditorPanel> _openEditors = new(StringComparer.OrdinalIgnoreCase);

        public Form1()
        {
            InitializeComponent();
            _deserializeDockContent = new DeserializeDockContent(GetContentFromPersistString);
            InitializeDocking();
            InitializeMenu();
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void InitializeDocking()
        {
            dockPanel = new DockPanel
            {
                Dock = DockStyle.Fill
            };

            this.Controls.Add(dockPanel);

            // Theme MUST be set before showing any DockContent
            dockPanel.Theme = new VS2015BlueTheme();

            // Left Project Explorer: restrict docking and prevent end-user undocking/closing
            _projectPanel = new ProjectTreePanel
            {
                DockAreas = DockAreas.DockLeft,
                AllowEndUserDocking = false,
                CloseButton = false
            };
            _projectPanel.FileNodeActivated += ProjectPanel_FileNodeActivated;
               _projectPanel.Show(dockPanel, DockState.DockLeft);

            new ToolWindow("Right Panel").Show(dockPanel, DockState.DockRight);
            new ToolWindow("Main Document").Show(dockPanel, DockState.Document);

            // Keep a reference so we can set its working directory later
            _psPanel = new PowerShellPanel();
            _psPanel.Show(dockPanel, DockState.DockBottomAutoHide);
        }

        private void ProjectPanel_FileNodeActivated(object? sender, string filePath)
        {
            OpenFileInEditor(filePath);
        }

        private void OpenFileInEditor(string filePath)
        {
            if (!File.Exists(filePath)) return;

            if (_openEditors.TryGetValue(filePath, out var existing))
            {
                existing.Show(dockPanel, DockState.Document);
                existing.Activate();
                return;
            }

            var editor = new CodeEditorPanel(filePath);
            _openEditors[filePath] = editor;
            editor.FormClosed += (s, e) => _openEditors.Remove(filePath);
            editor.Show(dockPanel, DockState.Document);
            editor.Activate();
        }

        // File menu (Open, Save, Save As, Close, Exit)
        private MenuStrip? _menuStrip;
        private ToolStripMenuItem? _fileMenu;
        private ToolStripMenuItem? _openMenuItem;
        private ToolStripMenuItem? _saveMenuItem;
        private ToolStripMenuItem? _saveAsMenuItem;
        private ToolStripMenuItem? _closeMenuItem;
        private ToolStripMenuItem? _exitMenuItem;

        private void InitializeMenu()
        {
            _menuStrip = new MenuStrip();
            _fileMenu = new ToolStripMenuItem("File");
            _openMenuItem = new ToolStripMenuItem("Open", null, OnOpenClicked);
            _saveMenuItem = new ToolStripMenuItem("Save", null, OnSaveClicked);
            _saveAsMenuItem = new ToolStripMenuItem("Save As", null, OnSaveAsClicked);
            _closeMenuItem = new ToolStripMenuItem("Close", null, OnCloseProjectClicked);
            _exitMenuItem = new ToolStripMenuItem("Exit", null, (s, e) => this.Close());

            _fileMenu.DropDownItems.AddRange(new ToolStripItem[]
            {
                _openMenuItem,
                new ToolStripSeparator(),
                _saveMenuItem,
                _saveAsMenuItem,
                new ToolStripSeparator(),
                _closeMenuItem,
                new ToolStripSeparator(),
                _exitMenuItem
            });

            _menuStrip.Items.Add(_fileMenu);
            this.MainMenuStrip = _menuStrip;
            this.Controls.Add(_menuStrip);

            UpdateFileMenuState();
        }

        private void UpdateFileMenuState()
        {
            bool hasProject = !string.IsNullOrEmpty(_currentProjectPath);
            if (_saveMenuItem != null) _saveMenuItem.Enabled = hasProject;
            if (_saveAsMenuItem != null) _saveAsMenuItem.Enabled = hasProject;
            if (_closeMenuItem != null) _closeMenuItem.Enabled = hasProject;
        }

        private void OnOpenClicked(object? sender, EventArgs e)
        {
            using var dlg = new FolderBrowserDialog
            {
                Description = "Select a project folder to load into the Project Explorer"
            };
            if (dlg.ShowDialog(this) == DialogResult.OK)
            {
                _currentProjectPath = dlg.SelectedPath;
                _currentTreeSavePath = null; // reset save path
                EnsureProjectPanel();
                _projectPanel!.LoadFromDirectory(_currentProjectPath);

                // Point PowerShell to the selected project's folder
                _psPanel?.SetWorkingDirectory(_currentProjectPath);

                UpdateFileMenuState();
            }
        }

        private void OnSaveClicked(object? sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(_currentProjectPath)) return;
            if (string.IsNullOrEmpty(_currentTreeSavePath))
            {
                OnSaveAsClicked(sender, e);
                return;
            }
            EnsureProjectPanel();
            _projectPanel!.SaveTreeToFile(_currentTreeSavePath!);
        }

        private void OnSaveAsClicked(object? sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(_currentProjectPath)) return;
            using var dlg = new SaveFileDialog
            {
                Title = "Save Project Tree As",
                Filter = "Tree Export (*.tree.txt)|*.tree.txt|All Files (*.*)|*.*",
                FileName = "Project.tree.txt"
            };
            if (dlg.ShowDialog(this) == DialogResult.OK)
            {
                _currentTreeSavePath = dlg.FileName;
                EnsureProjectPanel();
                _projectPanel!.SaveTreeToFile(_currentTreeSavePath);
            }
        }

        private void OnCloseProjectClicked(object? sender, EventArgs e)
        {
            _currentProjectPath = null;
            _currentTreeSavePath = null;
            EnsureProjectPanel();
            _projectPanel!.ClearProject();
            UpdateFileMenuState();
        }

        private void EnsureProjectPanel()
        {
            if (_projectPanel == null || _projectPanel.IsDisposed)
            {
                _projectPanel = new ProjectTreePanel
                {
                    DockAreas = DockAreas.DockLeft,
                    AllowEndUserDocking = false,
                    CloseButton = false
                };
                _projectPanel.FileNodeActivated += ProjectPanel_FileNodeActivated;
                _projectPanel.Show(dockPanel, DockState.DockLeft);
            }
        }

        private IDockContent GetContentFromPersistString(string persistString)
        {
            return persistString switch
            {
                "Left Panel" => new ToolWindow("Left Panel"),
                "Right Panel" => new ToolWindow("Right Panel"),
                "Main Document" => new ToolWindow("Main Document"),
                _ => new ToolWindow(persistString)
            };
        }

        private void LoadDefaultLayout()
        {
            new ToolWindow("Left Panel").Show(dockPanel, DockState.DockLeft);
            new ToolWindow("Right Panel").Show(dockPanel, DockState.DockRight);
            new ToolWindow("Main Document").Show(dockPanel, DockState.Document);
        }

        // Save layout on close
        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            dockPanel.SaveAsXml("layout.xml");
            base.OnFormClosing(e);
        }
    }

    internal static class Diagnostics
    {
        public static void Run()
        {
            // 1) Verify method existence
            var method = typeof(Mutex).GetMethod(
                "SetAccessControl",
                new[] { typeof(System.Security.AccessControl.MutexSecurity) });
            Debug.WriteLine("Has Mutex.SetAccessControl: " + (method != null));

            // 2) Log loaded assemblies early
            AppDomain.CurrentDomain.AssemblyLoad += (s, e) =>
            {
                try
                {
                    var loc = e.LoadedAssembly.Location;
                    Debug.WriteLine($"Loaded: {e.LoadedAssembly.FullName} @ {loc}");
                }
                catch { Debug.WriteLine($"Loaded: {e.LoadedAssembly.FullName} (dynamic/no location)"); }
            };
        }
    }
}
