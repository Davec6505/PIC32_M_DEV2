using System.Management.Automation;
using WeifenLuo.WinFormsUI.Docking;

namespace WinForms_Docable
{
    public partial class Form1 : Form
    {
        private DockPanel dockPanel;
        private VS2015LightTheme theme;
        private DeserializeDockContent _deserializeDockContent;

        // Project explorer panel reference and state
        private ProjectTreePanel? _projectPanel;
        private string? _currentProjectPath;
        private string? _currentTreeSavePath;

        // UI: collapse/expand button overlayed on the splitter between left and center
        private Button? _leftCollapseBtn;
        private double _prevLeftPortion = 0.22; // default portion to restore when expanding

        public Form1()
        {
            InitializeComponent();
            InitializeDocking();
            InitializeMenu();
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void InitializeDocking()
        {
            theme = new VS2015LightTheme();

            dockPanel = new DockPanel
            {
                Dock = DockStyle.Fill,
                DocumentStyle = DocumentStyle.DockingWindow // or DockingSdi
            };

            // Apply the theme (required in DPS 3.x)
            dockPanel.Theme = theme; // or: theme.ApplyTo(dockPanel);

            this.Controls.Add(dockPanel);

            // Left Project Explorer: restrict docking and prevent end-user undocking/closing
            _projectPanel = new ProjectTreePanel
            {
                DockAreas = DockAreas.DockLeft,
                AllowEndUserDocking = false,
                CloseButton = false,
                CloseButtonVisible = false
            };
            _projectPanel.Show(dockPanel, DockState.DockLeft);

            new ToolWindow("Right Panel").Show(dockPanel, DockState.DockRight);
            new ToolWindow("Main Document").Show(dockPanel, DockState.Document);
            new PowerShellPanel().Show(dockPanel, DockState.DockBottomAutoHide);

            // Create and position the collapse button over the left splitter
            EnsureLeftCollapseButton();
        }

        // File menu (Open, Save, Save As, Close, Exit)
        private MenuStrip? _menuStrip;
        private ToolStripMenuItem? _fileMenu;
        private ToolStripMenuItem? _openMenuItem;
        private ToolStripMenuItem? _saveMenuItem;
        private ToolStripMenuItem? _saveAsMenuItem;
        private ToolStripMenuItem? _closeMenuItem;
        private ToolStripMenuItem? _exitMenuItem;

        private void InitializeMenu()
        {
            _menuStrip = new MenuStrip();
            _fileMenu = new ToolStripMenuItem("File");
            _openMenuItem = new ToolStripMenuItem("Open", null, OnOpenClicked);
            _saveMenuItem = new ToolStripMenuItem("Save", null, OnSaveClicked);
            _saveAsMenuItem = new ToolStripMenuItem("Save As", null, OnSaveAsClicked);
            _closeMenuItem = new ToolStripMenuItem("Close", null, OnCloseProjectClicked);
            _exitMenuItem = new ToolStripMenuItem("Exit", null, (s, e) => this.Close());

            _fileMenu.DropDownItems.AddRange(new ToolStripItem[]
            {
                _openMenuItem,
                new ToolStripSeparator(),
                _saveMenuItem,
                _saveAsMenuItem,
                new ToolStripSeparator(),
                _closeMenuItem,
                new ToolStripSeparator(),
                _exitMenuItem
            });

            _menuStrip.Items.Add(_fileMenu);
            this.MainMenuStrip = _menuStrip;
            this.Controls.Add(_menuStrip);

            UpdateFileMenuState();
        }

        private void UpdateFileMenuState()
        {
            bool hasProject = !string.IsNullOrEmpty(_currentProjectPath);
            if (_saveMenuItem != null) _saveMenuItem.Enabled = hasProject;
            if (_saveAsMenuItem != null) _saveAsMenuItem.Enabled = hasProject;
            if (_closeMenuItem != null) _closeMenuItem.Enabled = hasProject;
        }

        private void OnOpenClicked(object? sender, EventArgs e)
        {
            using var dlg = new FolderBrowserDialog
            {
                Description = "Select a project folder to load into the Project Explorer"
            };
            if (dlg.ShowDialog(this) == DialogResult.OK)
            {
                _currentProjectPath = dlg.SelectedPath;
                _currentTreeSavePath = null; // reset save path
                EnsureProjectPanel();
                _projectPanel!.LoadFromDirectory(_currentProjectPath);
                UpdateFileMenuState();
            }
        }

        private void OnSaveClicked(object? sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(_currentProjectPath)) return;
            if (string.IsNullOrEmpty(_currentTreeSavePath))
            {
                OnSaveAsClicked(sender, e);
                return;
            }
            EnsureProjectPanel();
            _projectPanel!.SaveTreeToFile(_currentTreeSavePath!);
        }

        private void OnSaveAsClicked(object? sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(_currentProjectPath)) return;
            using var dlg = new SaveFileDialog
            {
                Title = "Save Project Tree As",
                Filter = "Tree Export (*.tree.txt)|*.tree.txt|All Files (*.*)|*.*",
                FileName = "Project.tree.txt"
            };
            if (dlg.ShowDialog(this) == DialogResult.OK)
            {
                _currentTreeSavePath = dlg.FileName;
                EnsureProjectPanel();
                _projectPanel!.SaveTreeToFile(_currentTreeSavePath);
            }
        }

        private void OnCloseProjectClicked(object? sender, EventArgs e)
        {
            _currentProjectPath = null;
            _currentTreeSavePath = null;
            EnsureProjectPanel();
            _projectPanel!.ClearProject();
            UpdateFileMenuState();
        }

        private void EnsureProjectPanel()
        {
            if (_projectPanel == null || _projectPanel.IsDisposed)
            {
                _projectPanel = new ProjectTreePanel
                {
                    DockAreas = DockAreas.DockLeft,
                    AllowEndUserDocking = false,
                    CloseButton = false,
                    CloseButtonVisible = false
                };
                _projectPanel.Show(dockPanel, DockState.DockLeft);
            }
        }

        private void EnsureLeftCollapseButton()
        {
            if (_leftCollapseBtn != null && !_leftCollapseBtn.IsDisposed) return;

            _leftCollapseBtn = new Button
            {
                Width = 18,
                Height = 36,
                FlatStyle = FlatStyle.Popup,
                TabStop = false,
                Text = "<"
            };
            _leftCollapseBtn.Click += (s, e) => ToggleLeftPane();

            // Parent to dockPanel so it sits above its children
            _leftCollapseBtn.Parent = dockPanel;
            _leftCollapseBtn.BringToFront();

            dockPanel.Layout += (s, e) => PositionLeftCollapseButton();
            PositionLeftCollapseButton();
        }

        private void PositionLeftCollapseButton()
        {
            if (_leftCollapseBtn == null || _leftCollapseBtn.IsDisposed) return;

            // Compute current left area width from portion
            int leftWidth = (int)Math.Round(dockPanel.Width * dockPanel.DockLeftPortion);
            int x = Math.Max(0, leftWidth - (_leftCollapseBtn.Width / 2));
            int y = (dockPanel.ClientSize.Height - _leftCollapseBtn.Height) / 2;

            _leftCollapseBtn.Left = x;
            _leftCollapseBtn.Top = Math.Max(0, y);

            bool visible = _projectPanel != null && !_projectPanel.IsDisposed && _projectPanel.DockState != DockState.Hidden;
            _leftCollapseBtn.Visible = visible;
        }

        private void ToggleLeftPane()
        {
            if (_projectPanel == null || _projectPanel.IsDisposed) return;

            if (_projectPanel.DockState == DockState.DockLeft)
            {
                // Remember portion for restore
                if (dockPanel.DockLeftPortion > 0.01)
                    _prevLeftPortion = dockPanel.DockLeftPortion;

                _projectPanel.DockState = DockState.DockLeftAutoHide;
                if (_leftCollapseBtn != null) _leftCollapseBtn.Text = ">";
            }
            else
            {
                _projectPanel.DockState = DockState.DockLeft;
                // Restore previous portion
                dockPanel.DockLeftPortion = Math.Max(0.1, Math.Min(0.8, _prevLeftPortion));
                if (_leftCollapseBtn != null) _leftCollapseBtn.Text = "<";
            }

            PositionLeftCollapseButton();
        }

        private IDockContent GetContentFromPersistString(string persistString)
        {
            return persistString switch
            {
                "Left Panel" => new ToolWindow("Left Panel"),
                "Right Panel" => new ToolWindow("Right Panel"),
                "Main Document" => new ToolWindow("Main Document"),
                _ => null
            };
        }

        private void LoadDefaultLayout()
        {
            new ToolWindow("Left Panel").Show(dockPanel, DockState.DockLeft);
            new ToolWindow("Right Panel").Show(dockPanel, DockState.DockRight);
            new ToolWindow("Main Document").Show(dockPanel, DockState.Document);
        }

        // Save layout on close
        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            dockPanel.SaveAsXml("layout.xml");
            base.OnFormClosing(e);
        }
    }


    public class ToolWindow : DockContent
    {
        public ToolWindow(string title)
        {
            this.Text = title;
            this.DockAreas = DockAreas.DockLeft | DockAreas.DockRight | DockAreas.Document;
            this.Controls.Add(new Label
            {
                Text = $"Content of {title}",
                Dock = DockStyle.Fill,
                TextAlign = System.Drawing.ContentAlignment.MiddleCenter
            });
        }
    }

    public class ProjectTreePanel : DockContent
    {
        private TreeView treeView;

        public ProjectTreePanel()
        {
            this.Text = "Project Explorer";
            this.DockAreas = DockAreas.DockLeft | DockAreas.Float;

            treeView = new TreeView
            {
                Dock = DockStyle.Fill,
                HideSelection = false,
                ShowNodeToolTips = true
            };

            this.Controls.Add(treeView);
        }

        public void ClearProject()
        {
            treeView.Nodes.Clear();
            this.Text = "Project Explorer";
        }

        public void LoadFromDirectory(string path)
        {
            treeView.BeginUpdate();
            try
            {
                treeView.Nodes.Clear();
                var root = new TreeNode(Path.GetFileName(path)) { Tag = path, ToolTipText = path };
                treeView.Nodes.Add(root);
                LoadDirectoryRecursive(root, path);
                root.Expand();
                this.Text = $"Project Explorer - {Path.GetFileName(path)}";
            }
            finally
            {
                treeView.EndUpdate();
            }
        }

        private void LoadDirectoryRecursive(TreeNode parent, string dir)
        {
            // Folders
            foreach (var subDir in Directory.GetDirectories(dir))
            {
                var folderNode = new TreeNode(Path.GetFileName(subDir))
                {
                    Tag = subDir,
                    ToolTipText = subDir
                };
                parent.Nodes.Add(folderNode);
                LoadDirectoryRecursive(folderNode, subDir);
            }

            // Files
            foreach (var file in Directory.GetFiles(dir))
            {
                var fileNode = new TreeNode(Path.GetFileName(file))
                {
                    Tag = file,
                    ToolTipText = file
                };
                parent.Nodes.Add(fileNode);
            }
        }

        public void SaveTreeToFile(string filePath)
        {
            using var writer = new StreamWriter(filePath, false, System.Text.Encoding.UTF8);
            foreach (TreeNode node in treeView.Nodes)
            {
                WriteNode(node, writer, 0);
            }
        }

        private void WriteNode(TreeNode node, StreamWriter writer, int indent)
        {
            writer.WriteLine(new string(' ', indent * 2) + node.Text);
            foreach (TreeNode child in node.Nodes)
            {
                WriteNode(child, writer, indent + 1);
            }
        }
    }

    public class PowerShellPanel : DockContent
    {
        private RichTextBox console;

        public PowerShellPanel()
        {
            this.Text = "PowerShell Console";
            this.DockAreas = DockAreas.DockBottom;

            console = new RichTextBox { Dock = DockStyle.Fill };
            this.Controls.Add(console);

            RunPowerShell("Get-Process");
        }

        private void RunPowerShell(string command)
        {
            using var ps = PowerShell.Create();
            ps.AddScript(command);
            var results = ps.Invoke();
            foreach (var result in results)
                console.AppendText(result.ToString() + Environment.NewLine);
        }
    }

}
